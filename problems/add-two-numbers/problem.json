{
  "slug": "add-two-numbers",
  "title": "Add Two Numbers",
  "difficulty": "Medium",
  "tags": ["Linked List", "Math", "Recursion"],
  "statement_md": "# Add Two Numbers\n\nYou are given two **non-empty** linked lists representing two non-negative integers. The digits are stored in **reverse order**, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n## Example 1:\n\n**Input:** l1 = [2,4,3], l2 = [5,6,4]  \n**Output:** [7,0,8]  \n**Explanation:** 342 + 465 = 807.\n\n## Example 2:\n\n**Input:** l1 = [0], l2 = [0]  \n**Output:** [0]\n\n## Example 3:\n\n**Input:** l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]  \n**Output:** [8,9,9,9,0,0,0,1]\n\n## Constraints:\n\n- The number of nodes in each linked list is in the range [1, 100].\n- 0 <= Node.val <= 9\n- It is guaranteed that the list represents a number that does not have leading zeros.",
  "examples": [
    {
      "in": "3\n2 4 3\n3\n5 6 4",
      "out": "3\n7 0 8"
    },
    {
      "in": "1\n0\n1\n0",
      "out": "1\n0"
    }
  ],
  "constraints": [
    {
      "name": "list_length",
      "min": 1,
      "max": 100,
      "desc": "Number of nodes in each linked list"
    },
    {
      "name": "node_value",
      "min": 0,
      "max": 9,
      "desc": "Value of each node"
    }
  ],
  "time_limit": 1.0,
  "memory_limit": 256,
  "languages": ["py", "cpp", "c", "js", "java"]
}
